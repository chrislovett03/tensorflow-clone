# Copyright 2022, The TensorFlow Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Utility functions that help in traversing Tensorflow graphs."""

from typing import Any, Callable, Dict, Iterable, Optional, Set, Text, Union

import tensorflow as tf

PackedTensor = Union[tf.Tensor, Iterable[tf.Tensor], Dict[Text, tf.Tensor]]

LayerFunction = Callable[[tf.keras.layers.Layer], None]


def depth_first_backward_pass(
    outputs: PackedTensor, layer_function: Optional[LayerFunction] = None
):
  """Performs a depth-first traversal on a given set of model outputs.

  This function is simplified version of
  `tf.keras.engine.functional._build_map()` that allows additional side-effects
  performed by an (optional) layer function.

  Args:
    outputs: A `PackedTensor` that should be generated by calling a
      `tf.keras.Model` on a set of non-eager inputs.
    layer_function: A callable that consumes a `tf.keras.layers.Layer`. This
      callable is applied to every layer in the DAG that generates `outputs`.
  """

  # Helper function that performs the traversal.
  def graph_crawler(
      tensor: tf.Tensor, finished_nodes: Set[Any], nodes_in_progress: Set[Any]
  ):
    layer, node_index, _ = tensor._keras_history  # pylint: disable=protected-access
    node = layer._inbound_nodes[node_index]  # pylint: disable=protected-access
    # Avoid duplicating work on shared subgraphs.
    if node in finished_nodes:
      return
    # Check if we encountered a cycle.
    if node in nodes_in_progress:
      raise ValueError(
          f'Tensor {tensor} from layer "{layer.name}" is part of a cycle.'
      )
    # Apply side-effects and go to the next node (pre-order traversal).
    if layer_function is not None:
      layer_function(layer)
    nodes_in_progress.add(node)
    if not node.is_input:
      for tensor in node.keras_inputs:
        graph_crawler(tensor, finished_nodes, nodes_in_progress)
    finished_nodes.add(node)
    nodes_in_progress.remove(node)

  # Traverse over the outputs.
  finished_nodes = set()
  nodes_in_progress = set()
  for output in tf.nest.flatten(outputs):
    graph_crawler(output, finished_nodes, nodes_in_progress)
